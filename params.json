{"name":"foso","tagline":"a convention over configuration bundler","body":"## How to install it?\r\n\r\n```\r\n$ npm install --save-dev foso\r\n```\r\n\r\n\r\n## Why not Gulp/Grunt or friends?\r\n\r\nGulp is a great task runner and has many libraries for bundling JavaScript and styles. However, a lot of configuration has to be done, to write a good gulpfile. Foso's manifesto is simplicity: everything should be bundled with zero configuration.\r\n\r\nFoso does a lot with little effort:\r\n\r\n* Bundles the resources with the plugins you install.\r\n* Watches for changes in the source files and rebundles them on change.\r\n* Starts a LiveReload server that will reload the browser each time a bundle was updated.\r\n* Optionally also hosts your resources with a static server.\r\n\r\n\r\n## Plugins\r\n\r\nFoso uses plugins to fosify resources. Here are some plugins available for foso:\r\n\r\n* [fosify-js](https://github.com/fosojs/fosify-js)\r\n* [fosify-less](https://github.com/fosojs/fosify-less)\r\n* [fosify-sass](https://github.com/fosojs/fosify-sass)\r\n* [fosify-html](https://github.com/fosojs/fosify-html)\r\n\r\n\r\n## Why is it convention over configuration?\r\n\r\nLets see why foso is convention over configuration on the example of the [Fosify JS][fosify-js] plugin.\r\n\r\nWhen using vanilla Browserify, each JavaScript file that has to be bundled needs to be specified. Fosify will bundle 2 types of JavaScript files:\r\n\r\n1. Files that are named **bundle.js** and are not in the root source directory. This files will be bundled, moved one folder up in the destination directory and renamed to the containing folder. For example, **/src/foo/bundle.js** would be bundled to **/dest/foo.js**.\r\n2. Files named **[something].bundle.js**. This files will be moved to the same directory as in the source folder and will be renamed, so that the bundle suffix is gone. For example, **/src/foo/bar.bundle.js** would be bundled to **/dest/foo/bar.js**.\r\n\r\nThe same conventions work for the less and sass/scss files.\r\n\r\n\r\n## Usage example in the code\r\n\r\n``` js\r\nvar foso = require('foso');\r\nvar less = require('fosify-less');\r\n\r\nfoso\r\n  .please({\r\n    src: './public',\r\n    dest: './build',\r\n    watch: true,\r\n    minify: true\r\n  })\r\n  .fosify(less)\r\n  .now();\r\n```\r\n\r\n## Using foso as a CLI tool\r\n\r\nEverything that is foso you can use from the command line. To use foso as a CLI tool, install it globally:\r\n\r\n```\r\nnpm install -g foso\r\n```\r\n\r\nHowever, foso is nothing without its plugins. When you install foso plugins globally, they will be used by foso every time you run it. Install some foso plugins globally:\r\n\r\n```\r\nnpm install -g fosify-js fosify-less fosify-html\r\n```\r\n\r\nNow that you have foso and some plugins installed, you can use it to bundle/host your resources.\r\n\r\nIf you want to bundle resources in the current working directory then run `foso build`. To bundle and minify your resources, run `foso build -m`.\r\n\r\nTo bundle and serve your resources, run `foso serve`.","google":"UA-64572930-1","note":"Don't delete this file! It's used internally to help with page regeneration."}